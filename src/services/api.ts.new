import ky from 'ky';
import { PaginatedChapters } from '../types';
import { API_URL, DEFAULT_VOICE } from '../utils/config';

// Define interface types for API responses
export interface Novel {
  id: string | null;
  title: string;
  author: string | null;
  chapterCount: number | null;
  source: 'google_doc' | 'epub_upload';
  coverImage?: string;
}

export interface EpubUploadResponse {
  title: string;
  author: string;
  chapterCount: number;
  message: string;
}

export interface ChapterContent {
  content: string[];
}

export interface UserProgress {
  novelName: string;
  lastChapterRead: number;
}

// API response interfaces for different chapter types
interface BaseChapter {
  chapterNumber: number;
  chapterTitle: string;
}

interface WebNovelChapter extends BaseChapter {
  link: string;
}

interface EpubChapter extends BaseChapter {
  id: string;
}

type ChapterResponse = WebNovelChapter | EpubChapter;

interface PaginatedChaptersResponse {
  chapters: ChapterResponse[];
  total_pages: number;
  current_page: number;
}

// Track TTS API calls
export const apiMetrics = {
  ttsCallCount: 0,
  ttsCallHistory: [] as {
    timestamp: number;
    textLength: number;
    voice: string;
    paragraph: number;
    url?: string;
    success?: boolean;
    duration?: number;
  }[],
  resetCounters: () => {
    apiMetrics.ttsCallCount = 0;
    apiMetrics.ttsCallHistory = [];
  },
  getCallCount: () => apiMetrics.ttsCallCount,
  getCallHistory: () => apiMetrics.ttsCallHistory,
  getCallsSummary: () => ({
    totalCalls: apiMetrics.ttsCallCount,
    callsIn5Min: apiMetrics.ttsCallHistory.filter(call => 
      (Date.now() - call.timestamp) < 5 * 60 * 1000
    ).length,
    callsIn1Hour: apiMetrics.ttsCallHistory.filter(call => 
      (Date.now() - call.timestamp) < 60 * 60 * 1000
    ).length,
    successRate: apiMetrics.ttsCallHistory.length > 0 
      ? apiMetrics.ttsCallHistory.filter(call => call.success).length / apiMetrics.ttsCallHistory.length
      : 0
  })
};

// Create Ky instance with configuration
const api = ky.create({
  prefixUrl: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
  hooks: {
    beforeRequest: [
      request => console.log(`API Request: ${request.method} ${request.url}`)
    ],
    afterResponse: [
      (request, options, response) => {
        if (!response.ok) console.error('API Error Response:', response.status);
        return response;
      }
    ],
    beforeError: [
      error => {
        console.error('API Request Error:', error.message);
        return error;
      }
    ]
  }
});

// API functions
export const fetchNovels = async (): Promise<Novel[]> => {
  try {
    return await api.get('novels').json<Novel[]>();
  } catch (error) {
    console.error('Error fetching novels:', error);
    throw error;
  }
};

export const uploadEpub = async (file: FormData): Promise<EpubUploadResponse> => {
  try {
    return await api.post('upload-epub', {
      body: file,
      headers: {
        'Content-Type': undefined // Let browser set it with boundary
      }
    }).json<EpubUploadResponse>();
  } catch (error) {
    console.error('Error uploading EPUB:', error);
    throw error;
  }
};

const isWebNovelChapter = (chapter: ChapterResponse): chapter is WebNovelChapter => {
  return 'link' in chapter;
};

export const fetchChapters = async (novelName: string, page: number = 1): Promise<PaginatedChapters> => {
  try {
    const response = await api
      .get(`chapters-with-pages/${encodeURIComponent(novelName)}`, {
        searchParams: { page }
      })
      .json<PaginatedChaptersResponse>();

    return {
      chapters: response.chapters.map(chapter => ({
        chapterNumber: chapter.chapterNumber,
        chapterTitle: chapter.chapterTitle,
        ...(isWebNovelChapter(chapter) ? { link: chapter.link } : { id: (chapter as EpubChapter).id })
      })),
      totalPages: response.total_pages,
      currentPage: response.current_page
    };
  } catch (error) {
    console.error('Error fetching chapters:', error);
    throw error;
  }
};

export const fetchChapterContent = async (novelName: string, chapterNumber: number): Promise<string[]> => {
  try {
    const response = await api.get('chapter', {
      searchParams: { novelName, chapterNumber }
    }).json<ChapterContent>();
    return response.content;
  } catch (error) {
    console.error('Error fetching chapter content:', error);
    throw error;
  }
};

export const fetchAllUserProgress = async (username: string): Promise<{ progress: UserProgress[] }> => {
  try {
    return await api.get('user/progress', {
      searchParams: { username }
    }).json<{ progress: UserProgress[] }>();
  } catch (error) {
    console.error('Error fetching user progress:', error);
    throw error;
  }
};

export const fetchUserProgressForNovel = async (username: string, novelName: string): Promise<UserProgress> => {
  try {
    return await api.get(`user/progress/${encodeURIComponent(novelName)}`, {
      searchParams: { username }
    }).json<UserProgress>();
  } catch (error) {
    console.error('Error fetching novel progress:', error);
    throw error;
  }
};

export const saveUserProgress = async (username: string, novelName: string, lastChapterRead: number) => {
  try {
    return await api.post('user/progress', {
      json: { username, novelName, lastChapterRead }
    }).json<{ status: string; message: string }>();
  } catch (error) {
    console.error('Error saving progress:', error);
    throw error;
  }
};

// TTS functions
export const fetchAudio = async (text: string, voice: string = DEFAULT_VOICE) => {
  try {
    const startTime = Date.now();
    apiMetrics.ttsCallCount++;
    const callIndex = apiMetrics.ttsCallHistory.length;
    apiMetrics.ttsCallHistory.push({
      timestamp: startTime,
      textLength: text.length,
      voice,
      paragraph: -1,
    });
    
    const response = await api.post('tts', {
      json: { text, voice },
    }).blob();
    
    apiMetrics.ttsCallHistory[callIndex].success = true;
    apiMetrics.ttsCallHistory[callIndex].duration = Date.now() - startTime;
    
    return response;
  } catch (error) {
    if (apiMetrics.ttsCallHistory.length > 0) {
      const lastIndex = apiMetrics.ttsCallHistory.length - 1;
      apiMetrics.ttsCallHistory[lastIndex].success = false;
    }
    console.error('Error fetching audio:', error);
    throw error;
  }
};

export const getTtsStreamUrl = (text: string, voice: string = DEFAULT_VOICE, paragraphIndex?: number) => {
  apiMetrics.ttsCallCount++;
  const url = new URL(`${API_URL}/tts`);
  url.searchParams.append('text', text);
  url.searchParams.append('voice', voice);
  const timestamp = Date.now();
  url.searchParams.append('_cb', timestamp.toString());
  
  apiMetrics.ttsCallHistory.push({
    timestamp,
    textLength: text.length,
    voice,
    paragraph: paragraphIndex ?? -1,
    url: url.toString()
  });
  
  return url.toString();
};

export default api;
